---
- name: Manage cert-manager Helm chart
  kubernetes.core.helm:
    name: cert-manager
    chart_ref: "{{ k8s_certmanager_chart.name }}"
    chart_repo_url: "{{ k8s_certmanager_chart.repo }}"
    chart_version: "{{ _release }}"
    release_namespace: "{{ k8s_certmanager_namespace }}"
    create_namespace: true
    state: present
    wait: true
    wait_timeout: "{{ k8s_certmanager_wait_timeout }}s"
    kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
    binary_path: "{{ lookup('ansible.builtin.env', 'HELM_BIN', default=k8s_helm_bin) }}"
    values:
      installCRDs: true
      podDnsPolicy: None
      podDnsConfig:
        nameservers:
          - 1.1.1.1
          - 8.8.8.8
  vars:
    _release: "{{ k8s_certmanager_chart_release | default(k8s_certmanager_chart.release) }}"

- name: Deploy cloudflare cluster issuer
  when: k8s_certmanager_issuer_name == 'letsencrypt'
  block:
    - name: Create certmanager secret
      kubernetes.core.k8s:
        namespace: "{{ k8s_certmanager_namespace }}"
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
        state: present
        resource_definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: cloudflare-api-token-secret
            namespace: "{{ k8s_certmanager_namespace }}"
          type: Opaque
          data:
            api-token: "{{ k8s_certmanager_secret | b64encode }}"

    - name: Create letsencrypt issuer
      kubernetes.core.k8s:
        namespace: "{{ k8s_certmanager_namespace }}"
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
        state: present
        resource_definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: "{{ k8s_certmanager_issuer_name }}"
          spec:
            acme:
              server: "{{ k8s_certmanager_issuer_server | default('https://acme-staging-v02.api.letsencrypt.org/directory') }}"
              email: "{{ k8s_certmanager_acme_email }}"
              privateKeySecretRef:
                name: letsencrypt-production
              solvers:
                - dns01:
                    cloudflare:
                      email: "{{ k8s_certmanager_acme_email }}"
                      apiKeySecretRef:
                        name: cloudflare-api-token-secret
                        key: api-token

- name: Deploy local cluster issuer
  when: k8s_certmanager_issuer_name == 'local'
  block:
    - name: Create bootstrap issuer
      kubernetes.core.k8s:
        name: bootstrap-issuer
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
        namespace: "{{ k8s_certmanager_namespace }}"
        state: present
        resource_definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: bootstrap-issuer
          spec:
            selfSigned: {}
      retries: "{{ k8s_retry_num }}"
      delay: "{{ k8s_retry_delay }}"
      register: certmanager_issuer_create
      until: certmanager_issuer_create is success

    - name: Create self-signed ca certificate
      kubernetes.core.k8s:
        namespace: "{{ k8s_certmanager_namespace }}"
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
        state: present
        resource_definition:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: cluster-ca
          spec:
            isCA: true
            commonName: cluster-issuer-ca
            secretName: cluster-issuer-secret
            privateKey:
              algorithm: ECDSA
              size: 256
            issuerRef:
              name: bootstrap-issuer
              kind: ClusterIssuer
      retries: "{{ k8s_retry_num }}"
      delay: "{{ k8s_retry_delay }}"
      register: certmanager_cert_create
      until: certmanager_cert_create is success

    - name: Create self-signed cluster issuer
      kubernetes.core.k8s:
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
        state: present
        resource_definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: "{{ k8s_certmanager_issuer_name }}"
          spec:
            ca:
              secretName: cluster-issuer-secret
      retries: "{{ k8s_retry_num }}"
      delay: "{{ k8s_retry_delay }}"
      register: certmanager_issuer_create
      until: certmanager_cert_create is success
