---
- block:

    - name: create test namespace
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
        resource_definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: longhorn-test

    - name: create test volume claim
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
        resource_definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: longhorn-test
            namespace: longhorn-test
          spec:
            storageClassName: standard
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 3Gi

    - name: create volume consumer
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
        resource_definition:
          apiVersion: v1
          kind: Pod
          metadata:
            name: longhorn-test
            namespace: longhorn-test
          spec:
            volumes:
              - name: longhorn-test-storage
                persistentVolumeClaim:
                  claimName: longhorn-test
            containers:
              - name: longhorn-test-container
                image: nginx
                ports:
                  - containerPort: 80
                    name: "http-server"
                volumeMounts:
                  - mountPath: "/usr/share/nginx/html"
                    name: longhorn-test-storage

  when: k8s_longhorn_deploy | bool

- name: validate persistent volume status
  ansible.builtin.fail:
    msg: "the following pvs are in failed status [{{ pv_names | join(', ') }}]"
  vars:
    pv_names: "{{ pv_failed | map(attribute='metadata.name') }}"
    pv_failed: "{{ pv_query | rejectattr('status.phase', 'equalto', 'Bound') }}"
    pv_query: "{{
      query(
        'kubernetes.core.k8s',
        kind='PersistentVolume',
        kubeconfig=k8s_kubeconfig
      ) }}"
  retries: "{{ k8s_retry_num }}"
  delay: "{{ k8s_retry_delay }}"
  until: pv_failed | length == 0
  failed_when: pv_failed | length > 0

- name: validate persistent claim status
  ansible.builtin.fail:
    msg: "the following pvcs are in failed status [{{ pvc_names | join(', ') }}]"
  vars:
    pvc_names: "{{ pvc_failed | map(attribute='metadata.name') }}"
    pvc_failed: "{{ pvc_query | rejectattr('status.phase', 'equalto', 'Bound') }}"
    pvc_query: "{{
      query(
        'kubernetes.core.k8s',
        kind='PersistentVolumeClaim',
        kubeconfig=k8s_kubeconfig
      ) }}"
  retries: "{{ k8s_retry_num }}"
  delay: "{{ k8s_retry_delay }}"
  until: pvc_failed | length == 0
  failed_when: pvc_failed | length > 0
