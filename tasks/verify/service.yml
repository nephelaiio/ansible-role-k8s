---
- name: Set verification facts
  ansible.builtin.set_fact:
    _query: 'kubernetes.core.k8s'
    _config: "{{ k8s_kubeconfig }}"

- name: Set service facts
  ansible.builtin.set_fact:
    loadbalancer_data: "{{ _loadbalancers }}"
    loadbalancer_failed: "{{ _loadbalancers | json_query(status_filter) }}"
    loadbalancer_dns: "{{ _loadbalancers | json_query(dns_filter) | json_query(dns_map) | map('join', ' ') }}"
  vars:
    _loadbalancers: "{{ service_data | json_query(loadbalancer_filter) }}"
    service_data: "{{ service_query | selectattr('spec.type', 'equalto', 'LoadBalancer') }}"
    dns_filter: "[?((metadata.annotations.\"external-dns.alpha.kubernetes.io/hostname\" || '') != '')]"
    dns_map: "[].to_array([status.loadBalancer.ingress[0].ip, metadata.annotations.\"external-dns.alpha.kubernetes.io/hostname\"])"
    loadbalancer_filter: "[?(spec.type == 'LoadBalancer')]"
    status_filter: "[?!not_null(status.loadBalancer)].metadata.name"
    service_query: "{{ query(_query, kind='Service', kubeconfig=_config) }}"

- name: Validate service status
  ansible.builtin.assert:
    that: loadbalancer_failed | length == 0
    fail_msg: "the following loadlabancers are in failed status [{{ loadbalancer_failed | join(', ') }}]"

- name: Write service hostfile
  ansible.builtin.lineinfile:
    path: "{{ k8s_verifier_path }}/hosts"
    line: "{{ item }}"
    create: true
  loop: "{{ loadbalancer_dns }}"
