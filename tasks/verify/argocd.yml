---
- name: Query argocd-repo-server definition
  ansible.builtin.set_fact:
    _reposerver_def: "{{ _reposerver_query | first }}"
  vars:
    _reposerver_query: "{{ query(
        'kubernetes.core.k8s',
        kind='Deployment',
        namespace=k8s_argocd_namespace,
        resource_name='argocd-repo-server',
        kubeconfig=k8s_kubeconfig
      ) }}"

- name: Query argocd ingress metadata
  ansible.builtin.set_fact:
    ingress_argocd_ip: "{{ ingress_query[0][_status][_lb][_ingress][0][_ip] }}"
  vars:
    _status: status
    _lb: loadBalancer
    _ingress: ingress
    _ip: ip
    ingress_query: "{{ query(
        'kubernetes.core.k8s',
        kind='Ingress',
        namespace=k8s_argocd_namespace,
        kubeconfig=k8s_kubeconfig
      ) }}"
  register: ingress_facts
  retries: 4
  delay: 30
  until:
    - ingress_facts is succeeded
    - ingress_query | length > 0
    - _status in ingress_query[0]
    - _lb in ingress_query[0][_status]
    - _ingress in ingress_query[0][_status][_lb]
    - ingress_query[0][_status][_lb][_ingress] | length > 0
    - _ip in ingress_query[0][_status][_lb][_ingress][0]

- name: Record argocd deployment env vars
  ansible.builtin.set_fact:
    argocd_env: "{{ _argocd_env }}"
    argocd_env_exec_item: "{{ _argocd_env | selectattr('name', 'equalto', 'ARGOCD_EXEC_TIMEOUT') }}"
  vars:
    _argocd_env: "{{ _reposerver_def.spec.template.spec.containers[0].env }}"

- name: Fail argocd exec timeout presence check
  ansible.builtin.fail:
    msg: "env var ARGOCD_EXEC_TIMEOUT is not set"
  when: argocd_env_exec_item | length == 0

- name: Fail argocd exec timeout value check
  ansible.builtin.fail:
    msg: "env var ARGOCD_EXEC_TIMEOUT is not set correctly ({{ argocd_env_exec_value }})"
  vars:
    argocd_env_exec_value: "{{ argocd_env_exec_item[0].value }}"
  when: argocd_env_exec_value != k8s_argocd_exec_timeout

- name: Query argocd access info
  ansible.builtin.set_fact:
    argocd_admin_username: admin
    argocd_admin_password: "{{ _argocd_secret_data.data.password | b64decode }}"
  vars:
    _argocd_secret_data: "{{ _argocd_secret_query | first }}"
    _argocd_secret_query: "{{ query(
        'kubernetes.core.k8s',
        kind='Secret',
        namespace=k8s_argocd_namespace,
        resource_name='argocd-initial-admin-secret',
        kubeconfig=k8s_kubeconfig
      ) }}"

- name: Record argocd auth credentials
  ansible.builtin.set_fact:
    argocd_admin_username: "admin"
    argocd_admin_password: "{{ _argocd_secret_data.data.password | b64decode }}"
  vars:
    _argocd_secret_data: "{{ _argocd_secret_query | first }}"
    _argocd_secret_query: "{{ query(
        'kubernetes.core.k8s',
        kind='Secret',
        namespace=k8s_argocd_namespace,
        resource_name='argocd-initial-admin-secret',
        kubeconfig=k8s_kubeconfig
      ) }}"

- name: Auth against argocd api
  ansible.builtin.uri:
    url: "https://{{ ingress_argocd_ip }}/api/v1/session"
    method: POST
    body_format: json
    headers:
      host: "{{ k8s_argocd_hostname }}"
    body:
      username: "{{ argocd_admin_username }}"
      password: "{{ argocd_admin_password }}"
    validate_certs: false
  register: argocd_auth_data

- name: Record argocd auth token
  ansible.builtin.set_fact:
    argocd_admin_token: "{{ argocd_auth_data.json.token }}"

- name: Verify argocd application status
  block:

    - name: Query argocd application status
      ansible.builtin.uri:
        url: "https://{{ ingress_argocd_ip }}/api/v1/applications?refresh=true"
        headers:
          host: "{{ k8s_argocd_hostname }}"
          cookie: "argocd.token={{ argocd_admin_token }}"
        validate_certs: false
      retries: "{{ k8s_retry_num }}"
      delay: "{{ k8s_retry_delay }}"
      register: argocd_app_data
      failed_when: argocd_app_data.json['items'] | rejectattr('status.health.status', 'equalto', 'Healthy') | length > 0

  rescue:

    - name: Debug failed applications
      ansible.builtin.fail:
        msg: "the following argocd applications are in failed status [{{ app_names | join(', ') }}]"
      vars:
        app_names: "{{ app_failed | map(attribute='metadata.name') }}"
        app_failed: "{{ argocd_app_data.json['items'] | rejectattr('status.health.status', 'equalto', 'Healthy') }}"
