---
- name: Set verification facts
  ansible.builtin.set_fact:
    _query: 'kubernetes.core.k8s'
    _config: "{{ k8s_kubeconfig }}"

- name: Validate ingress status
  ansible.builtin.fail:
    msg: "the following ingress are in failed status [{{ ingress_failed | join(', ') }}]"
  vars:
    ingress_failed: "{{ ingress_query | community.general.json_query(ingress_filter) | map(attribute='metadata.name') }}"
    ingress_filter: "[?!not_null(status.loadBalancer)]"
    ingress_query: "{{ query(_query, kind='Ingress', kubeconfig=_config) }}"
  retries: "{{ k8s_retry_num }}"
  delay: "{{ k8s_retry_delay }}"
  until: ingress_failed | length == 0
  when: ingress_failed | length > 0

- name: Set ingress metadata
  ansible.builtin.set_fact:
    ingress_data: "{{ ingress_query | community.general.json_query(ingress_filter) }}"
    ingress_hosts: []
    ingress_cmds: []
  vars:
    ingress_filter: "[].to_array([status.loadBalancer.ingress[].ip, spec.tls[0].hosts[]])"
    ingress_query: "{{ query(_query, kind='Ingress', kubeconfig=_config) }}"

- name: Set ingress data
  ansible.builtin.set_fact:
    ingress_hosts: "{{ ingress_hosts + (ingress_hostentries | flatten) }}"
    ingress_cmds: "{{ ingress_cmds + (ingress_cmdentries | flatten) }}"
  vars:
    ingress_hostentries: "{{ item[0] | product(item[1]) | map('join', ' ') }}"
    ingress_cmdentries: "{{ ['curl -fLD- https://'] | product(item[1]) | map('join', '') }}"
  loop_control:
    label: "{{ item | map('join', ' ') }}"
  loop: "{{ ingress_data }}"

- name: Write ingress hostfile
  ansible.builtin.lineinfile:
    path: "{{ k8s_verifier_path }}/hosts"
    line: "{{ item }}"
    create: true
  loop: "{{ ingress_hosts }}"

- name: Execute ingress checks
  ansible.builtin.command: "{{ _cmd }}"
  vars:
    _cmd: "{{ k8s_verifier_path }}/bwrap \"{{ item }}\""
  loop_control:
    label: "{{ _cmd }}"
  loop: "{{ ingress_cmds }}"
  when: k8s_ingress_verify | bool
  changed_when: false
