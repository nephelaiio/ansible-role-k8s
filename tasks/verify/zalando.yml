---
- name: Set verification facts
  ansible.builtin.set_fact:
    _query: 'kubernetes.core.k8s'
    _api: 'acid.zalan.do/v1'
    _config: "{{ k8s_kubeconfig }}"

- name: Create Zalando PostgreSQL namespace
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
    api_version: v1
    kind: Namespace
    name: "{{ zalando_namespace | default('zalando-test') }}"

- name: Create test PostgreSQL cluster
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
    resource_definition: "{{ _definition }}"
  vars:
    _definition: |
      apiVersion: acid.zalan.do/v1
      kind: postgresql
      metadata:
        name: {{ zalando_team | default('molecule') }}-{{ zalando_db | default('db') }}
        namespace: {{ zalando_namespace | default('zalando-test') }}
      spec:
        teamId: {{ zalando_team | default('molecule') }}
        volume:
          size: 1Gi
        numberOfInstances: 1
        allowedSourceRanges:
          - 0.0.0.0/0
        enableMasterLoadBalancer: true
        serviceAnnotations:
          metallb.universe.tf/address-pool: private
        users:
          zalando:
            - superuser
            - createdb
          {{ zalando_user | default('molecule') }}: []
        databases:
          {{ zalando_db | default('db') }}: {{ zalando_user | default('molecule') }}
        postgresql:
          version: "13"

- name: Validate PostgreSQL cluster status
  ansible.builtin.fail:
    msg: "the following clusters are in failed status [{{ cluster_failed | join(', ') }}]"
  vars:
    cluster_failed: "{{ cluster_query | rejectattr('status.PostgresClusterStatus', 'equalto', 'Running') | map(attribute='metadata.name') }}"
    cluster_query: "{{ query(_query, api_version=_api, kind='postgresql', kubeconfig=_config) }}"
  retries: "{{ k8s_retry_num if ((k8s_retry_num * k8s_retry_delay) > 360) else ((360 / k8s_retry_delay) | round(0, 'ceil') | int) }}"
  delay: "{{ k8s_retry_delay }}"
  until: cluster_failed | length == 0
  failed_when: cluster_failed | length > 0
